function [featureTable,outputTable] = GenerateALLFeatures(inputData)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputData: A table or a cell array of tables/matrices containing the
%  data as those imported into the app.
%
% Output:
%  featureTable: A table containing all features and condition variables.
%  outputTable: A table containing the computation results.
%
% This function computes features:
%  Ax_sigstats/ClearanceFactor
%  Ax_sigstats/CrestFactor
%  Ax_sigstats/ImpulseFactor
%  Ax_sigstats/Kurtosis
%  Ax_sigstats/Mean
%  Ax_sigstats/PeakValue
%  Ax_sigstats/RMS
%  Ax_sigstats/SINAD
%  Ax_sigstats/SNR
%  Ax_sigstats/ShapeFactor
%  Ax_sigstats/Skewness
%  Ax_sigstats/Std
%  Ax_sigstats/THD
%  Ay_sigstats/ClearanceFactor
%  Ay_sigstats/CrestFactor
%  Ay_sigstats/ImpulseFactor
%  Ay_sigstats/Kurtosis
%  Ay_sigstats/Mean
%  Ay_sigstats/PeakValue
%  Ay_sigstats/RMS
%  Ay_sigstats/SINAD
%  Ay_sigstats/SNR
%  Ay_sigstats/ShapeFactor
%  Ay_sigstats/Skewness
%  Ay_sigstats/Std
%  Ay_sigstats/THD
%  Az_sigstats/ClearanceFactor
%  Az_sigstats/CrestFactor
%  Az_sigstats/ImpulseFactor
%  Az_sigstats/Kurtosis
%  Az_sigstats/Mean
%  Az_sigstats/PeakValue
%  Az_sigstats/RMS
%  Az_sigstats/SINAD
%  Az_sigstats/SNR
%  Az_sigstats/ShapeFactor
%  Az_sigstats/Skewness
%  Az_sigstats/Std
%  Az_sigstats/THD
%  Gx_sigstats/ClearanceFactor
%  Gx_sigstats/CrestFactor
%  Gx_sigstats/ImpulseFactor
%  Gx_sigstats/Kurtosis
%  Gx_sigstats/Mean
%  Gx_sigstats/PeakValue
%  Gx_sigstats/RMS
%  Gx_sigstats/SINAD
%  Gx_sigstats/SNR
%  Gx_sigstats/ShapeFactor
%  Gx_sigstats/Skewness
%  Gx_sigstats/Std
%  Gx_sigstats/THD
%  Gy_sigstats/ClearanceFactor
%  Gy_sigstats/CrestFactor
%  Gy_sigstats/ImpulseFactor
%  Gy_sigstats/Kurtosis
%  Gy_sigstats/Mean
%  Gy_sigstats/PeakValue
%  Gy_sigstats/RMS
%  Gy_sigstats/SINAD
%  Gy_sigstats/SNR
%  Gy_sigstats/ShapeFactor
%  Gy_sigstats/Skewness
%  Gy_sigstats/Std
%  Gy_sigstats/THD
%  Gz_sigstats/ClearanceFactor
%  Gz_sigstats/CrestFactor
%  Gz_sigstats/ImpulseFactor
%  Gz_sigstats/Kurtosis
%  Gz_sigstats/Mean
%  Gz_sigstats/PeakValue
%  Gz_sigstats/RMS
%  Gz_sigstats/SINAD
%  Gz_sigstats/SNR
%  Gz_sigstats/ShapeFactor
%  Gz_sigstats/Skewness
%  Gz_sigstats/Std
%  Gz_sigstats/THD
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

% Auto-generated by MATLAB on 11-Sep-2025 15:50:34

% Create output ensemble.
outputEnsemble = workspaceEnsemble(inputData,'DataVariables',["Ax";"Ay";"Az";"Gx";"Gy";"Gz"],'ConditionVariables',"label");

% Reset the ensemble to read from the beginning of the ensemble.
reset(outputEnsemble);

% Append new signal or feature names to DataVariables.
outputEnsemble.DataVariables = unique([outputEnsemble.DataVariables;"Ax_sigstats";"Ay_sigstats";"Az_sigstats";"Gx_sigstats";"Gy_sigstats";"Gz_sigstats"],'stable');

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = ["Ax","Ay","Az","Gx","Gy","Gz"];

% Initialize a cell array to store all the results.
allMembersResult = {};

% Loop through all ensemble members to read and write data.
while hasdata(outputEnsemble)
    % Read one member.
    member = read(outputEnsemble);

    % Get all input variables.
    Ax = readMemberData(member,"Ax","Col1");
    iv = (0:1:(height(Ax)-1)*1)';
    Ax.Sample = iv;
    Ay = readMemberData(member,"Ay","Col1");
    iv = (0:1:(height(Ay)-1)*1)';
    Ay.Sample = iv;
    Az = readMemberData(member,"Az","Col1");
    iv = (0:1:(height(Az)-1)*1)';
    Az.Sample = iv;
    Gx = readMemberData(member,"Gx","Col1");
    iv = (0:1:(height(Gx)-1)*1)';
    Gx.Sample = iv;
    Gy = readMemberData(member,"Gy","Col1");
    iv = (0:1:(height(Gy)-1)*1)';
    Gy.Sample = iv;
    Gz = readMemberData(member,"Gz","Col1");
    iv = (0:1:(height(Gz)-1)*1)';
    Gz.Sample = iv;

    % Initialize a table to store results.
    memberResult = table;

    %% SignalFeatures
    try
        % Compute signal features.
        inputSignal = Ax.Col1;
        ClearanceFactor = max(abs(inputSignal))/(mean(sqrt(abs(inputSignal)))^2);
        CrestFactor = peak2rms(inputSignal);
        ImpulseFactor = max(abs(inputSignal))/mean(abs(inputSignal));
        Kurtosis = kurtosis(inputSignal);
        Mean = mean(inputSignal,'omitnan');
        PeakValue = max(abs(inputSignal));
        RMS = rms(inputSignal,'omitnan');
        SINAD = sinad(inputSignal);
        SNR = snr(inputSignal);
        ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
        Skewness = skewness(inputSignal);
        Std = std(inputSignal,'omitnan');
        THD = thd(inputSignal);

        % Concatenate signal features.
        featureValues = [ClearanceFactor,CrestFactor,ImpulseFactor,Kurtosis,Mean,PeakValue,RMS,SINAD,SNR,ShapeFactor,Skewness,Std,THD];

        % Store computed features in a table.
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        Ax_sigstats = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Store computed features in a table.
        featureValues = NaN(1,13);
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        Ax_sigstats = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({Ax_sigstats},'VariableNames',{'Ax_sigstats'})]; %#ok<AGROW>

    %% SignalFeatures
    try
        % Compute signal features.
        inputSignal = Ay.Col1;
        ClearanceFactor = max(abs(inputSignal))/(mean(sqrt(abs(inputSignal)))^2);
        CrestFactor = peak2rms(inputSignal);
        ImpulseFactor = max(abs(inputSignal))/mean(abs(inputSignal));
        Kurtosis = kurtosis(inputSignal);
        Mean = mean(inputSignal,'omitnan');
        PeakValue = max(abs(inputSignal));
        RMS = rms(inputSignal,'omitnan');
        SINAD = sinad(inputSignal);
        SNR = snr(inputSignal);
        ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
        Skewness = skewness(inputSignal);
        Std = std(inputSignal,'omitnan');
        THD = thd(inputSignal);

        % Concatenate signal features.
        featureValues = [ClearanceFactor,CrestFactor,ImpulseFactor,Kurtosis,Mean,PeakValue,RMS,SINAD,SNR,ShapeFactor,Skewness,Std,THD];

        % Store computed features in a table.
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        Ay_sigstats = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Store computed features in a table.
        featureValues = NaN(1,13);
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        Ay_sigstats = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({Ay_sigstats},'VariableNames',{'Ay_sigstats'})]; %#ok<AGROW>

    %% SignalFeatures
    try
        % Compute signal features.
        inputSignal = Az.Col1;
        ClearanceFactor = max(abs(inputSignal))/(mean(sqrt(abs(inputSignal)))^2);
        CrestFactor = peak2rms(inputSignal);
        ImpulseFactor = max(abs(inputSignal))/mean(abs(inputSignal));
        Kurtosis = kurtosis(inputSignal);
        Mean = mean(inputSignal,'omitnan');
        PeakValue = max(abs(inputSignal));
        RMS = rms(inputSignal,'omitnan');
        SINAD = sinad(inputSignal);
        SNR = snr(inputSignal);
        ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
        Skewness = skewness(inputSignal);
        Std = std(inputSignal,'omitnan');
        THD = thd(inputSignal);

        % Concatenate signal features.
        featureValues = [ClearanceFactor,CrestFactor,ImpulseFactor,Kurtosis,Mean,PeakValue,RMS,SINAD,SNR,ShapeFactor,Skewness,Std,THD];

        % Store computed features in a table.
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        Az_sigstats = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Store computed features in a table.
        featureValues = NaN(1,13);
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        Az_sigstats = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({Az_sigstats},'VariableNames',{'Az_sigstats'})]; %#ok<AGROW>

    %% SignalFeatures
    try
        % Compute signal features.
        inputSignal = Gx.Col1;
        ClearanceFactor = max(abs(inputSignal))/(mean(sqrt(abs(inputSignal)))^2);
        CrestFactor = peak2rms(inputSignal);
        ImpulseFactor = max(abs(inputSignal))/mean(abs(inputSignal));
        Kurtosis = kurtosis(inputSignal);
        Mean = mean(inputSignal,'omitnan');
        PeakValue = max(abs(inputSignal));
        RMS = rms(inputSignal,'omitnan');
        SINAD = sinad(inputSignal);
        SNR = snr(inputSignal);
        ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
        Skewness = skewness(inputSignal);
        Std = std(inputSignal,'omitnan');
        THD = thd(inputSignal);

        % Concatenate signal features.
        featureValues = [ClearanceFactor,CrestFactor,ImpulseFactor,Kurtosis,Mean,PeakValue,RMS,SINAD,SNR,ShapeFactor,Skewness,Std,THD];

        % Store computed features in a table.
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        Gx_sigstats = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Store computed features in a table.
        featureValues = NaN(1,13);
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        Gx_sigstats = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({Gx_sigstats},'VariableNames',{'Gx_sigstats'})]; %#ok<AGROW>

    %% SignalFeatures
    try
        % Compute signal features.
        inputSignal = Gy.Col1;
        ClearanceFactor = max(abs(inputSignal))/(mean(sqrt(abs(inputSignal)))^2);
        CrestFactor = peak2rms(inputSignal);
        ImpulseFactor = max(abs(inputSignal))/mean(abs(inputSignal));
        Kurtosis = kurtosis(inputSignal);
        Mean = mean(inputSignal,'omitnan');
        PeakValue = max(abs(inputSignal));
        RMS = rms(inputSignal,'omitnan');
        SINAD = sinad(inputSignal);
        SNR = snr(inputSignal);
        ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
        Skewness = skewness(inputSignal);
        Std = std(inputSignal,'omitnan');
        THD = thd(inputSignal);

        % Concatenate signal features.
        featureValues = [ClearanceFactor,CrestFactor,ImpulseFactor,Kurtosis,Mean,PeakValue,RMS,SINAD,SNR,ShapeFactor,Skewness,Std,THD];

        % Store computed features in a table.
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        Gy_sigstats = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Store computed features in a table.
        featureValues = NaN(1,13);
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        Gy_sigstats = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({Gy_sigstats},'VariableNames',{'Gy_sigstats'})]; %#ok<AGROW>

    %% SignalFeatures
    try
        % Compute signal features.
        inputSignal = Gz.Col1;
        ClearanceFactor = max(abs(inputSignal))/(mean(sqrt(abs(inputSignal)))^2);
        CrestFactor = peak2rms(inputSignal);
        ImpulseFactor = max(abs(inputSignal))/mean(abs(inputSignal));
        Kurtosis = kurtosis(inputSignal);
        Mean = mean(inputSignal,'omitnan');
        PeakValue = max(abs(inputSignal));
        RMS = rms(inputSignal,'omitnan');
        SINAD = sinad(inputSignal);
        SNR = snr(inputSignal);
        ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
        Skewness = skewness(inputSignal);
        Std = std(inputSignal,'omitnan');
        THD = thd(inputSignal);

        % Concatenate signal features.
        featureValues = [ClearanceFactor,CrestFactor,ImpulseFactor,Kurtosis,Mean,PeakValue,RMS,SINAD,SNR,ShapeFactor,Skewness,Std,THD];

        % Store computed features in a table.
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        Gz_sigstats = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Store computed features in a table.
        featureValues = NaN(1,13);
        featureNames = {'ClearanceFactor','CrestFactor','ImpulseFactor','Kurtosis','Mean','PeakValue','RMS','SINAD','SNR','ShapeFactor','Skewness','Std','THD'};
        Gz_sigstats = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({Gz_sigstats},'VariableNames',{'Gz_sigstats'})]; %#ok<AGROW>

    % Append all member results to the cell array.
    allMembersResult = [allMembersResult; {memberResult}]; %#ok<AGROW>
end

% Write the results for all members to the ensemble.
writeToMembers(outputEnsemble,allMembersResult)

% Gather all features into a table.
selectedFeatureNames = ["Ax_sigstats/ClearanceFactor","Ax_sigstats/CrestFactor","Ax_sigstats/ImpulseFactor","Ax_sigstats/Kurtosis","Ax_sigstats/Mean","Ax_sigstats/PeakValue","Ax_sigstats/RMS","Ax_sigstats/SINAD","Ax_sigstats/SNR","Ax_sigstats/ShapeFactor","Ax_sigstats/Skewness","Ax_sigstats/Std","Ax_sigstats/THD","Ay_sigstats/ClearanceFactor","Ay_sigstats/CrestFactor","Ay_sigstats/ImpulseFactor","Ay_sigstats/Kurtosis","Ay_sigstats/Mean","Ay_sigstats/PeakValue","Ay_sigstats/RMS","Ay_sigstats/SINAD","Ay_sigstats/SNR","Ay_sigstats/ShapeFactor","Ay_sigstats/Skewness","Ay_sigstats/Std","Ay_sigstats/THD","Az_sigstats/ClearanceFactor","Az_sigstats/CrestFactor","Az_sigstats/ImpulseFactor","Az_sigstats/Kurtosis","Az_sigstats/Mean","Az_sigstats/PeakValue","Az_sigstats/RMS","Az_sigstats/SINAD","Az_sigstats/SNR","Az_sigstats/ShapeFactor","Az_sigstats/Skewness","Az_sigstats/Std","Az_sigstats/THD","Gx_sigstats/ClearanceFactor","Gx_sigstats/CrestFactor","Gx_sigstats/ImpulseFactor","Gx_sigstats/Kurtosis","Gx_sigstats/Mean","Gx_sigstats/PeakValue","Gx_sigstats/RMS","Gx_sigstats/SINAD","Gx_sigstats/SNR","Gx_sigstats/ShapeFactor","Gx_sigstats/Skewness","Gx_sigstats/Std","Gx_sigstats/THD","Gy_sigstats/ClearanceFactor","Gy_sigstats/CrestFactor","Gy_sigstats/ImpulseFactor","Gy_sigstats/Kurtosis","Gy_sigstats/Mean","Gy_sigstats/PeakValue","Gy_sigstats/RMS","Gy_sigstats/SINAD","Gy_sigstats/SNR","Gy_sigstats/ShapeFactor","Gy_sigstats/Skewness","Gy_sigstats/Std","Gy_sigstats/THD","Gz_sigstats/ClearanceFactor","Gz_sigstats/CrestFactor","Gz_sigstats/ImpulseFactor","Gz_sigstats/Kurtosis","Gz_sigstats/Mean","Gz_sigstats/PeakValue","Gz_sigstats/RMS","Gz_sigstats/SINAD","Gz_sigstats/SNR","Gz_sigstats/ShapeFactor","Gz_sigstats/Skewness","Gz_sigstats/Std","Gz_sigstats/THD"];
featureTable = readFeatureTable(outputEnsemble,'Features',selectedFeatureNames);

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = unique([outputEnsemble.DataVariables;outputEnsemble.ConditionVariables;outputEnsemble.IndependentVariables],'stable');

% Gather results into a table.
if nargout > 1
    outputTable = readall(outputEnsemble);
end
end
